{"version":3,"sources":["servieces/movies-api.js","images/default.jpg","pages/MovieDetailsPage.js"],"names":["BASE_URL","MyKey","fetchMovies","axios","get","then","response","data","results","searchMovies","searchQuery","searchMovieDetailsById","id","MovieDetailsPage","state","imgUrl","title","descr","genres","releaseDate","rating","a","movieId","this","props","match","params","moviesApi","Number","setState","generatePosterPath","poster_path","overview","changeGenresList","parseInt","release_date","first_air_date","vote_average","imageName","defaultImage","length","map","genre","name","join","src","alt","Component"],"mappings":"yIAAA,qBACMA,EAAW,+BACXC,EAAQ,mCAqBC,KAAEC,YAnBG,WAClB,OAAOC,IACJC,IADI,UACGJ,EADH,qCACwCC,IAC5CI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,YAgBNC,aAbT,SAAAC,GACnB,OAAOP,IACJC,IADI,UAEAJ,EAFA,iCAEiCC,EAFjC,kBAEgDS,EAFhD,+CAIJL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,YAQQG,uBALb,SAAAC,GAC7B,OAAOT,IACJC,IADI,UACGJ,EADH,kBACqBY,EADrB,oBACmCX,EADnC,oBAEJI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,mHCrBhB,MAA0B,oC,OCMnCM,E,4MACJC,MAAQ,CACNC,OAAQ,GACRC,MAAO,GACPC,MAAO,GACPC,OAAQ,GACRC,YAAa,GACbC,OAAQ,I,8FAGV,8BAAAC,EAAA,6DACUC,EAAYC,KAAKC,MAAMC,MAAMC,OAA7BJ,QADV,SAEqBK,IAAUhB,uBAAuBiB,OAAON,IAF7D,OAEQf,EAFR,OAGEgB,KAAKM,SAAS,CACZd,OAAQQ,KAAKO,mBAAmBvB,EAAKwB,aACrCf,MAAOT,EAAKS,MACZC,MAAOV,EAAKyB,SACZd,OAAQK,KAAKU,iBAAiB1B,EAAKW,QACnCC,YACES,OAAOM,SAAS3B,EAAK4B,eACrBP,OAAOM,SAAS3B,EAAK6B,gBACvBhB,OAAQb,EAAK8B,eAXjB,gD,sFAcA,SAAmBC,GACjB,OAAKA,EAGC,GAAN,OA9Be,mCA8Bf,OAAuBA,GAFdC,I,8BAIX,SAAiBrB,GACf,OAAKA,EAAOsB,OACLtB,EAAOuB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAAMC,KAAK,KADjB,a,oBAG7B,WACE,IAAQtB,EAAYC,KAAKC,MAAMC,MAAMC,OAA7BJ,QACR,EAA8DC,KAAKT,MAA3DC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,OAAQC,EAAtC,EAAsCA,YAAaC,EAAnD,EAAmDA,OACnD,OACE,gCACE,wHAAqBE,KACrB,qBAAKuB,IAAK9B,EAAQ+B,IAAK9B,IACvB,+BACGA,EACD,sCAASG,EAAT,UAEDC,EAAS,yCAAYA,KAAc,KACpC,0CACA,4BAAIH,IACJ,wCACA,4BAAIC,IACJ,uDACA,+BACE,sCACA,mD,GArDqB6B,aA8DhBlC","file":"static/js/movie-details-page.fd52f708.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst MyKey = '92dbea49aa4406146839d70707aaf148';\r\n\r\nconst fetchMovies = () => {\r\n  return axios\r\n    .get(`${BASE_URL}/trending/all/day?api_key=${MyKey}`)\r\n    .then(response => response.data.results);\r\n};\r\n\r\nconst searchMovies = searchQuery => {\r\n  return axios\r\n    .get(\r\n      `${BASE_URL}/search/movie?api_key=${MyKey}&query=${searchQuery}&language=en-US&page=1&include_adult=false`,\r\n    )\r\n    .then(response => response.data.results);\r\n};\r\n\r\nconst searchMovieDetailsById = id => {\r\n  return axios\r\n    .get(`${BASE_URL}/movie/${id}?api_key=${MyKey}&language=en-US`)\r\n    .then(response => response.data);\r\n};\r\nexport default { fetchMovies, searchMovies, searchMovieDetailsById };\r\n","export default __webpack_public_path__ + \"static/media/default.2e01288c.jpg\";","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport moviesApi from '../servieces/movies-api';\r\nimport defaultImage from '../images/default.jpg';\r\nconst POSTER_URL = 'https://themoviedb.org/t/p/w500';\r\n\r\nclass MovieDetailsPage extends Component {\r\n  state = {\r\n    imgUrl: '',\r\n    title: '',\r\n    descr: '',\r\n    genres: [],\r\n    releaseDate: '',\r\n    rating: '',\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { movieId } = this.props.match.params;\r\n    const data = await moviesApi.searchMovieDetailsById(Number(movieId));\r\n    this.setState({\r\n      imgUrl: this.generatePosterPath(data.poster_path),\r\n      title: data.title,\r\n      descr: data.overview,\r\n      genres: this.changeGenresList(data.genres),\r\n      releaseDate:\r\n        Number.parseInt(data.release_date) ||\r\n        Number.parseInt(data.first_air_date),\r\n      rating: data.vote_average,\r\n    });\r\n  }\r\n  generatePosterPath(imageName) {\r\n    if (!imageName) {\r\n      return defaultImage;\r\n    }\r\n    return `${POSTER_URL}${imageName}`;\r\n  }\r\n  changeGenresList(genres) {\r\n    if (!genres.length) return 'NO GENRE';\r\n    return genres.map(genre => genre.name).join(' ');\r\n  }\r\n  render() {\r\n    const { movieId } = this.props.match.params;\r\n    const { imgUrl, title, descr, genres, releaseDate, rating } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Страница фильма {movieId}</h1>\r\n        <img src={imgUrl} alt={title} />\r\n        <h2>\r\n          {title}\r\n          <span> ({releaseDate})</span>\r\n        </h2>\r\n        {rating ? <p>Raiting:{rating}</p> : null}\r\n        <h3>Overview</h3>\r\n        <p>{descr}</p>\r\n        <h4>Genres</h4>\r\n        <p>{genres}</p>\r\n        <p>Additional information</p>\r\n        <ul>\r\n          <li>Cast</li>\r\n          <li>Reviews</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// MovieDetailsPage.propTypes = {};\r\n\r\nexport default MovieDetailsPage;\r\n"],"sourceRoot":""}